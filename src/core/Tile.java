package core;

import java.util.ArrayList;
import util.Rect;

/**
 * This contains the properties, collision boxes, and cropped image of a tile.
 * The tile's image is generated by the user-provided ImageDelegate. See MapFile
 * for more info.
 * 
 * @param <IMG>
 *            The IMG param of the parent MapFile. See MapFile for more info.
 */
public class Tile<IMG> {
	/**
	 * The ID of this tile within its tileset.
	 */
	public final int localId;
	/**
	 * The pixels in the tileset's image that belong to this tile. Cannot
	 * be null.
	 */
	public final Rect pixelRect;
	/**
	 * The image computed by ImageDelegate, or null if no delegate is provided.
	 * See MapFile for more info.
	 */
	public IMG image;
	/**
	 * An arbitrary string. Cannot be null.
	 */
	public String tileType;
	/**
	 * <p>
	 * An array of collision boxes attached to this tile.
	 * </p>
	 * 
	 * <p>
	 * If the array would be empty, null is used instead to avoid allocations
	 * for every tile.
	 * </p>
	 */
	public ArrayList<CollisionBounds> collisionBoxes;
	/**
	 * <p>
	 * A dictionary of custom properties attached to this tile.
	 * </p>
	 * 
	 * <p>
	 * If the dictionary would be empty, null is used instead to avoid allocations
	 * for every tile.
	 * </p>
	 */
	public TMXProperties properties;
	/**
	 * The tileset this tile belongs to. Cannot be null.
	 */
	public Tileset<IMG> parent;

	Tile(Tileset<IMG> parent, int id, Rect pixelRect) {
		localId = id;
		this.pixelRect = pixelRect;
		tileType = "";
		image = null;
		collisionBoxes = null;
		properties = null;
		this.parent = parent;
	}

	Tile(Tileset<IMG> parent, int id, Rect pixelRect, TMXProperties properties) {
		this(parent, id, pixelRect);

		this.properties = properties;
	}

	public int getGid(MapFile<IMG> parentFile) {
		for (MapFile.TilesetEntry<IMG> tilesetEntry : parentFile.tilesets) {
			if (tilesetEntry.tiles == parent) {
				return localId + tilesetEntry.firstGid;
			}
		}
		throw new RuntimeException("Can't find parent tileset in the given MapFile.");
	}
}
